// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.1
// source: api/proto/exam/v1/exam.proto

package examv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExamState int32

const (
	ExamState_EXAM_STATE_UNSPECIFIED ExamState = 0
	ExamState_EXAM_STATE_CREATED     ExamState = 1
	ExamState_EXAM_STATE_ACTIVE      ExamState = 2
	ExamState_EXAM_STATE_FINISHED    ExamState = 3
)

// Enum value maps for ExamState.
var (
	ExamState_name = map[int32]string{
		0: "EXAM_STATE_UNSPECIFIED",
		1: "EXAM_STATE_CREATED",
		2: "EXAM_STATE_ACTIVE",
		3: "EXAM_STATE_FINISHED",
	}
	ExamState_value = map[string]int32{
		"EXAM_STATE_UNSPECIFIED": 0,
		"EXAM_STATE_CREATED":     1,
		"EXAM_STATE_ACTIVE":      2,
		"EXAM_STATE_FINISHED":    3,
	}
)

func (x ExamState) Enum() *ExamState {
	p := new(ExamState)
	*p = x
	return p
}

func (x ExamState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExamState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_exam_v1_exam_proto_enumTypes[0].Descriptor()
}

func (ExamState) Type() protoreflect.EnumType {
	return &file_api_proto_exam_v1_exam_proto_enumTypes[0]
}

func (x ExamState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExamState.Descriptor instead.
func (ExamState) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_exam_v1_exam_proto_rawDescGZIP(), []int{0}
}

type ExamStudentState int32

const (
	ExamStudentState_EXAM_STUDENT_STATE_UNSPECIFIED ExamStudentState = 0
	ExamStudentState_EXAM_STUDENT_STATE_NOT_STARTED ExamStudentState = 1
	ExamStudentState_EXAM_STUDENT_STATE_IN_PROGRESS ExamStudentState = 2
	ExamStudentState_EXAM_STUDENT_STATE_FINISHED    ExamStudentState = 3
)

// Enum value maps for ExamStudentState.
var (
	ExamStudentState_name = map[int32]string{
		0: "EXAM_STUDENT_STATE_UNSPECIFIED",
		1: "EXAM_STUDENT_STATE_NOT_STARTED",
		2: "EXAM_STUDENT_STATE_IN_PROGRESS",
		3: "EXAM_STUDENT_STATE_FINISHED",
	}
	ExamStudentState_value = map[string]int32{
		"EXAM_STUDENT_STATE_UNSPECIFIED": 0,
		"EXAM_STUDENT_STATE_NOT_STARTED": 1,
		"EXAM_STUDENT_STATE_IN_PROGRESS": 2,
		"EXAM_STUDENT_STATE_FINISHED":    3,
	}
)

func (x ExamStudentState) Enum() *ExamStudentState {
	p := new(ExamStudentState)
	*p = x
	return p
}

func (x ExamStudentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExamStudentState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_exam_v1_exam_proto_enumTypes[1].Descriptor()
}

func (ExamStudentState) Type() protoreflect.EnumType {
	return &file_api_proto_exam_v1_exam_proto_enumTypes[1]
}

func (x ExamStudentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExamStudentState.Descriptor instead.
func (ExamStudentState) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_exam_v1_exam_proto_rawDescGZIP(), []int{1}
}

type Exam struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title           string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Subject         string                 `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	DurationMinutes int32                  `protobuf:"varint,4,opt,name=duration_minutes,json=durationMinutes,proto3" json:"duration_minutes,omitempty"`
	TotalQuestions  int32                  `protobuf:"varint,5,opt,name=total_questions,json=totalQuestions,proto3" json:"total_questions,omitempty"`
	IsRandom        bool                   `protobuf:"varint,6,opt,name=is_random,json=isRandom,proto3" json:"is_random,omitempty"`
	TeacherId       string                 `protobuf:"bytes,7,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
	ClassIds        []string               `protobuf:"bytes,8,rep,name=class_ids,json=classIds,proto3" json:"class_ids,omitempty"`
	Status          *ExamStatus            `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	StartTime       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime         *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Exam) Reset() {
	*x = Exam{}
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Exam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exam) ProtoMessage() {}

func (x *Exam) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exam.ProtoReflect.Descriptor instead.
func (*Exam) Descriptor() ([]byte, []int) {
	return file_api_proto_exam_v1_exam_proto_rawDescGZIP(), []int{0}
}

func (x *Exam) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Exam) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Exam) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Exam) GetDurationMinutes() int32 {
	if x != nil {
		return x.DurationMinutes
	}
	return 0
}

func (x *Exam) GetTotalQuestions() int32 {
	if x != nil {
		return x.TotalQuestions
	}
	return 0
}

func (x *Exam) GetIsRandom() bool {
	if x != nil {
		return x.IsRandom
	}
	return false
}

func (x *Exam) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

func (x *Exam) GetClassIds() []string {
	if x != nil {
		return x.ClassIds
	}
	return nil
}

func (x *Exam) GetStatus() *ExamStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Exam) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Exam) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Exam) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Exam) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreateExamRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Title           string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Subject         string                 `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	DurationMinutes int32                  `protobuf:"varint,3,opt,name=duration_minutes,json=durationMinutes,proto3" json:"duration_minutes,omitempty"`
	TotalQuestions  int32                  `protobuf:"varint,4,opt,name=total_questions,json=totalQuestions,proto3" json:"total_questions,omitempty"`
	IsRandom        bool                   `protobuf:"varint,5,opt,name=is_random,json=isRandom,proto3" json:"is_random,omitempty"`
	TeacherId       string                 `protobuf:"bytes,6,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
	ClassIds        []string               `protobuf:"bytes,7,rep,name=class_ids,json=classIds,proto3" json:"class_ids,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateExamRequest) Reset() {
	*x = CreateExamRequest{}
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExamRequest) ProtoMessage() {}

func (x *CreateExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExamRequest.ProtoReflect.Descriptor instead.
func (*CreateExamRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_exam_v1_exam_proto_rawDescGZIP(), []int{1}
}

func (x *CreateExamRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateExamRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CreateExamRequest) GetDurationMinutes() int32 {
	if x != nil {
		return x.DurationMinutes
	}
	return 0
}

func (x *CreateExamRequest) GetTotalQuestions() int32 {
	if x != nil {
		return x.TotalQuestions
	}
	return 0
}

func (x *CreateExamRequest) GetIsRandom() bool {
	if x != nil {
		return x.IsRandom
	}
	return false
}

func (x *CreateExamRequest) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

func (x *CreateExamRequest) GetClassIds() []string {
	if x != nil {
		return x.ClassIds
	}
	return nil
}

type GetExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamRequest) Reset() {
	*x = GetExamRequest{}
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamRequest) ProtoMessage() {}

func (x *GetExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamRequest.ProtoReflect.Descriptor instead.
func (*GetExamRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_exam_v1_exam_proto_rawDescGZIP(), []int{2}
}

func (x *GetExamRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListExamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TeacherId     string                 `protobuf:"bytes,1,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
	PageSize      int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                 `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExamsRequest) Reset() {
	*x = ListExamsRequest{}
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamsRequest) ProtoMessage() {}

func (x *ListExamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamsRequest.ProtoReflect.Descriptor instead.
func (*ListExamsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_exam_v1_exam_proto_rawDescGZIP(), []int{3}
}

func (x *ListExamsRequest) GetTeacherId() string {
	if x != nil {
		return x.TeacherId
	}
	return ""
}

func (x *ListExamsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListExamsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListExamsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exams         []*Exam                `protobuf:"bytes,1,rep,name=exams,proto3" json:"exams,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListExamsResponse) Reset() {
	*x = ListExamsResponse{}
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListExamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamsResponse) ProtoMessage() {}

func (x *ListExamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamsResponse.ProtoReflect.Descriptor instead.
func (*ListExamsResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_exam_v1_exam_proto_rawDescGZIP(), []int{4}
}

func (x *ListExamsResponse) GetExams() []*Exam {
	if x != nil {
		return x.Exams
	}
	return nil
}

func (x *ListExamsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Exam          *Exam                  `protobuf:"bytes,2,opt,name=exam,proto3" json:"exam,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateExamRequest) Reset() {
	*x = UpdateExamRequest{}
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExamRequest) ProtoMessage() {}

func (x *UpdateExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExamRequest.ProtoReflect.Descriptor instead.
func (*UpdateExamRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_exam_v1_exam_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateExamRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateExamRequest) GetExam() *Exam {
	if x != nil {
		return x.Exam
	}
	return nil
}

type DeleteExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteExamRequest) Reset() {
	*x = DeleteExamRequest{}
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExamRequest) ProtoMessage() {}

func (x *DeleteExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExamRequest.ProtoReflect.Descriptor instead.
func (*DeleteExamRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_exam_v1_exam_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteExamRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ActivateExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClassIds      []string               `protobuf:"bytes,2,rep,name=class_ids,json=classIds,proto3" json:"class_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivateExamRequest) Reset() {
	*x = ActivateExamRequest{}
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivateExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateExamRequest) ProtoMessage() {}

func (x *ActivateExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateExamRequest.ProtoReflect.Descriptor instead.
func (*ActivateExamRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_exam_v1_exam_proto_rawDescGZIP(), []int{7}
}

func (x *ActivateExamRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActivateExamRequest) GetClassIds() []string {
	if x != nil {
		return x.ClassIds
	}
	return nil
}

type DeactivateExamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeactivateExamRequest) Reset() {
	*x = DeactivateExamRequest{}
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeactivateExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateExamRequest) ProtoMessage() {}

func (x *DeactivateExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateExamRequest.ProtoReflect.Descriptor instead.
func (*DeactivateExamRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_exam_v1_exam_proto_rawDescGZIP(), []int{8}
}

func (x *DeactivateExamRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetExamStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamStatusRequest) Reset() {
	*x = GetExamStatusRequest{}
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamStatusRequest) ProtoMessage() {}

func (x *GetExamStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamStatusRequest.ProtoReflect.Descriptor instead.
func (*GetExamStatusRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_exam_v1_exam_proto_rawDescGZIP(), []int{9}
}

func (x *GetExamStatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ExamStatus struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExamId           string                 `protobuf:"bytes,2,opt,name=exam_id,json=examId,proto3" json:"exam_id,omitempty"`
	State            ExamState              `protobuf:"varint,3,opt,name=state,proto3,enum=exam.v1.ExamState" json:"state,omitempty"`
	TotalStudents    int32                  `protobuf:"varint,4,opt,name=total_students,json=totalStudents,proto3" json:"total_students,omitempty"`
	StudentsStarted  int32                  `protobuf:"varint,5,opt,name=students_started,json=studentsStarted,proto3" json:"students_started,omitempty"`
	StudentsFinished int32                  `protobuf:"varint,6,opt,name=students_finished,json=studentsFinished,proto3" json:"students_finished,omitempty"`
	StudentStatuses  []*StudentStatus       `protobuf:"bytes,7,rep,name=student_statuses,json=studentStatuses,proto3" json:"student_statuses,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ExamStatus) Reset() {
	*x = ExamStatus{}
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamStatus) ProtoMessage() {}

func (x *ExamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamStatus.ProtoReflect.Descriptor instead.
func (*ExamStatus) Descriptor() ([]byte, []int) {
	return file_api_proto_exam_v1_exam_proto_rawDescGZIP(), []int{10}
}

func (x *ExamStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExamStatus) GetExamId() string {
	if x != nil {
		return x.ExamId
	}
	return ""
}

func (x *ExamStatus) GetState() ExamState {
	if x != nil {
		return x.State
	}
	return ExamState_EXAM_STATE_UNSPECIFIED
}

func (x *ExamStatus) GetTotalStudents() int32 {
	if x != nil {
		return x.TotalStudents
	}
	return 0
}

func (x *ExamStatus) GetStudentsStarted() int32 {
	if x != nil {
		return x.StudentsStarted
	}
	return 0
}

func (x *ExamStatus) GetStudentsFinished() int32 {
	if x != nil {
		return x.StudentsFinished
	}
	return 0
}

func (x *ExamStatus) GetStudentStatuses() []*StudentStatus {
	if x != nil {
		return x.StudentStatuses
	}
	return nil
}

type StudentStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StudentId     string                 `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	StudentName   string                 `protobuf:"bytes,2,opt,name=student_name,json=studentName,proto3" json:"student_name,omitempty"`
	ClassId       string                 `protobuf:"bytes,3,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	State         ExamStudentState       `protobuf:"varint,4,opt,name=state,proto3,enum=exam.v1.ExamStudentState" json:"state,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StudentStatus) Reset() {
	*x = StudentStatus{}
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StudentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StudentStatus) ProtoMessage() {}

func (x *StudentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_exam_v1_exam_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StudentStatus.ProtoReflect.Descriptor instead.
func (*StudentStatus) Descriptor() ([]byte, []int) {
	return file_api_proto_exam_v1_exam_proto_rawDescGZIP(), []int{11}
}

func (x *StudentStatus) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *StudentStatus) GetStudentName() string {
	if x != nil {
		return x.StudentName
	}
	return ""
}

func (x *StudentStatus) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *StudentStatus) GetState() ExamStudentState {
	if x != nil {
		return x.State
	}
	return ExamStudentState_EXAM_STUDENT_STATE_UNSPECIFIED
}

func (x *StudentStatus) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *StudentStatus) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

var File_api_proto_exam_v1_exam_proto protoreflect.FileDescriptor

var file_api_proto_exam_v1_exam_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x61, 0x6d,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07,
	0x65, 0x78, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x04, 0x0a, 0x04, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xf0, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x73, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x60, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x78, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x05, 0x65, 0x78, 0x61, 0x6d, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x46, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x65,
	0x78, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x22, 0x23,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa1, 0x02, 0x0a, 0x0a, 0x45, 0x78, 0x61,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x10, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x8f, 0x02, 0x0a,
	0x0d, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x6f,
	0x0a, 0x09, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x58, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x41, 0x4d, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0x9f, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x55,
	0x44, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x58, 0x41, 0x4d,
	0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e,
	0x45, 0x58, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10,
	0x03, 0x32, 0x8b, 0x04, 0x0a, 0x0b, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x12,
	0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x17, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x12, 0x19,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d,
	0x12, 0x1a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x61, 0x6d, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x1e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x42,
	0x23, 0x5a, 0x21, 0x63, 0x62, 0x74, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x78,
	0x61, 0x6d, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_api_proto_exam_v1_exam_proto_rawDescOnce sync.Once
	file_api_proto_exam_v1_exam_proto_rawDescData []byte
)

func file_api_proto_exam_v1_exam_proto_rawDescGZIP() []byte {
	file_api_proto_exam_v1_exam_proto_rawDescOnce.Do(func() {
		file_api_proto_exam_v1_exam_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_exam_v1_exam_proto_rawDesc), len(file_api_proto_exam_v1_exam_proto_rawDesc)))
	})
	return file_api_proto_exam_v1_exam_proto_rawDescData
}

var file_api_proto_exam_v1_exam_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_proto_exam_v1_exam_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_proto_exam_v1_exam_proto_goTypes = []any{
	(ExamState)(0),                // 0: exam.v1.ExamState
	(ExamStudentState)(0),         // 1: exam.v1.ExamStudentState
	(*Exam)(nil),                  // 2: exam.v1.Exam
	(*CreateExamRequest)(nil),     // 3: exam.v1.CreateExamRequest
	(*GetExamRequest)(nil),        // 4: exam.v1.GetExamRequest
	(*ListExamsRequest)(nil),      // 5: exam.v1.ListExamsRequest
	(*ListExamsResponse)(nil),     // 6: exam.v1.ListExamsResponse
	(*UpdateExamRequest)(nil),     // 7: exam.v1.UpdateExamRequest
	(*DeleteExamRequest)(nil),     // 8: exam.v1.DeleteExamRequest
	(*ActivateExamRequest)(nil),   // 9: exam.v1.ActivateExamRequest
	(*DeactivateExamRequest)(nil), // 10: exam.v1.DeactivateExamRequest
	(*GetExamStatusRequest)(nil),  // 11: exam.v1.GetExamStatusRequest
	(*ExamStatus)(nil),            // 12: exam.v1.ExamStatus
	(*StudentStatus)(nil),         // 13: exam.v1.StudentStatus
	(*timestamppb.Timestamp)(nil), // 14: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 15: google.protobuf.Empty
}
var file_api_proto_exam_v1_exam_proto_depIdxs = []int32{
	12, // 0: exam.v1.Exam.status:type_name -> exam.v1.ExamStatus
	14, // 1: exam.v1.Exam.start_time:type_name -> google.protobuf.Timestamp
	14, // 2: exam.v1.Exam.end_time:type_name -> google.protobuf.Timestamp
	14, // 3: exam.v1.Exam.created_at:type_name -> google.protobuf.Timestamp
	14, // 4: exam.v1.Exam.updated_at:type_name -> google.protobuf.Timestamp
	2,  // 5: exam.v1.ListExamsResponse.exams:type_name -> exam.v1.Exam
	2,  // 6: exam.v1.UpdateExamRequest.exam:type_name -> exam.v1.Exam
	0,  // 7: exam.v1.ExamStatus.state:type_name -> exam.v1.ExamState
	13, // 8: exam.v1.ExamStatus.student_statuses:type_name -> exam.v1.StudentStatus
	1,  // 9: exam.v1.StudentStatus.state:type_name -> exam.v1.ExamStudentState
	14, // 10: exam.v1.StudentStatus.start_time:type_name -> google.protobuf.Timestamp
	14, // 11: exam.v1.StudentStatus.end_time:type_name -> google.protobuf.Timestamp
	3,  // 12: exam.v1.ExamService.CreateExam:input_type -> exam.v1.CreateExamRequest
	4,  // 13: exam.v1.ExamService.GetExam:input_type -> exam.v1.GetExamRequest
	5,  // 14: exam.v1.ExamService.ListExams:input_type -> exam.v1.ListExamsRequest
	7,  // 15: exam.v1.ExamService.UpdateExam:input_type -> exam.v1.UpdateExamRequest
	8,  // 16: exam.v1.ExamService.DeleteExam:input_type -> exam.v1.DeleteExamRequest
	9,  // 17: exam.v1.ExamService.ActivateExam:input_type -> exam.v1.ActivateExamRequest
	10, // 18: exam.v1.ExamService.DeactivateExam:input_type -> exam.v1.DeactivateExamRequest
	11, // 19: exam.v1.ExamService.GetExamStatus:input_type -> exam.v1.GetExamStatusRequest
	2,  // 20: exam.v1.ExamService.CreateExam:output_type -> exam.v1.Exam
	2,  // 21: exam.v1.ExamService.GetExam:output_type -> exam.v1.Exam
	6,  // 22: exam.v1.ExamService.ListExams:output_type -> exam.v1.ListExamsResponse
	2,  // 23: exam.v1.ExamService.UpdateExam:output_type -> exam.v1.Exam
	15, // 24: exam.v1.ExamService.DeleteExam:output_type -> google.protobuf.Empty
	2,  // 25: exam.v1.ExamService.ActivateExam:output_type -> exam.v1.Exam
	2,  // 26: exam.v1.ExamService.DeactivateExam:output_type -> exam.v1.Exam
	12, // 27: exam.v1.ExamService.GetExamStatus:output_type -> exam.v1.ExamStatus
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_api_proto_exam_v1_exam_proto_init() }
func file_api_proto_exam_v1_exam_proto_init() {
	if File_api_proto_exam_v1_exam_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_exam_v1_exam_proto_rawDesc), len(file_api_proto_exam_v1_exam_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_exam_v1_exam_proto_goTypes,
		DependencyIndexes: file_api_proto_exam_v1_exam_proto_depIdxs,
		EnumInfos:         file_api_proto_exam_v1_exam_proto_enumTypes,
		MessageInfos:      file_api_proto_exam_v1_exam_proto_msgTypes,
	}.Build()
	File_api_proto_exam_v1_exam_proto = out.File
	file_api_proto_exam_v1_exam_proto_goTypes = nil
	file_api_proto_exam_v1_exam_proto_depIdxs = nil
}
